NOTE: Windows users must precede all commands shown below with: @python orgm.py@
NOTE: Mac and Linux/Unix users must precede all commands show below with @./orgm.py@

Rules for using arguments and argument values:
* Title is required.  All other elements are optional
* Title is a string of one or more tokens enclosed in _double_ quotes
* Project is a string of one or more tokens enclosed in _double_ quotes
* Area is a string of one or more tokens enclosed in _double_ quotes
* Tags are a list of elements of one or more tokens, separated by commas, enclosed in _double_ quotes
* Actions are a list of elements of one or more tokens, separated by commas, enclosed in _double_ quotes
* Due Date is a string enclosed in _double_ quotes. TODO for future is support a real date type
* Note is a string of one ore more tokens enclosed in _double_ quotes

<br/>
*Command Reference*

<br/>
_Add_
@[-a | --add]@ - adds an item to the data file

* Must include --title, and can optionally include any of the additional Element arguments below
@[-t | --title]@  - item title 
@[-A | --area]@  - area of responsibility that includes the item
@[-p | --project]@  - project the item is part of
@[-T | --tags]@  - tags associated with the item
@[-c | --actions]@  - item actions that need to be taken
@[-P | --priority]@  - priority of the item
@[-d | --due_date]@  - date first action associated with item is due 
@[-n | --note]@  - additional freeform text associated with item

@--add --title "my item title" --area "my area" --project "my project" --tags "tag 1, tag 2"  --actions "["do this now", "do this later"]" --due_date "5-5-2010" --note "This is a short note. Long ones should be edited in the file"@

@--add@
      @--title "my item title"@
      @--area "my area"@ 
      @--project "my project"@ 
      @--tags "tag 1, tag 2"@  
      @--actions "do this now, do this later"@ 
      @--priority "P1"@ 
      @--due_date "5-5-2010"@
      @--note "This is a short note. Long ones should be edited in the file"@

@-a -t "my item title" -A "my area" -p "my project" -T "tag 1, tag 2"  -c "["do this now", "do this later"]" -d "5-5-2010" -n "This is a short note. Long ones should be edited in the file"@

<br/>
_Add Empty Item_      
@[-e | --add_empty]@  - appends an empty new Item to the bottom of the data file

<br/>
_Remove_ 
@[-r | --remove]@  - removes an Item from the data file
* Must supply *one* Element type and value. Items matching will be removed.
* Can supply optional arg to match Items on a regex rather than literal match
@[-x | --regex ]@

@--remove --title "my item title"@
@--remove --regex --title "my item t*"@    
@--remove --tags "tag1, tag2"@
@--remove --tags "tag1"@
@--remove --actions "do this now, do this later"@
@--remove --actions "do this now"@
@--remove --note "This is a short note. Long ones should be edited in the file"@

@-r -t "my item title"@
@-r -x -t "my item t*"@    
@-r -T "tag1, tag2"@
@-r -T "tag1"@
@-r -c "do this now, do this later"@
@-r -c "do this now"@
@-r -n "This is a short note. Long ones should be edited in the file"@

<br/>
_Find_ 
@[-f | --find]@ - finds an Item and returns it to stdout
* Must supply *one* Element type and value. Items matching will be returned.
* Can supply optional --regex arg to match Items on a regex rather than literal match
@[-x | --regex ]@

@--find --title "my item title"@
@--find --tags "tag1, tag2"@
@--find --tags "tag1"@
@--find --regex --tags "tag*"@
@--find --actions "do this now, do this later"@
@--find --actions "do this now"@
@--find --note "This is a short note. Long ones should be edited in the file"@
@--find --regex --title "my item t*"@

@-f -t "my item title"@
@-f -T "tag1, tag2"@
@-f -T "tag1"@
@-f -x -T "tag*"@
@-f -c "do this now, do this later"@
@-f -c "do this now"@
@-f -n "This is a short note. Long ones should be edited in the file"@
@-f -x -t "my item t*"@

<br/>
_Show Items, Grouped_ 
@[-s | --show_grouped]@ - show Items grouped by an Element type, sent to stdout 
* Must supply one Element type
@[-1 | --by_title]@
@[-2 | --by_area]@
@[-3 | --by_project]@
@[-4 | --by_tags]@
@[-5 | --by_actions]@
@[-6 | --by_priority]@

@--show_grouped --by_area@
@--show_grouped --by_project@
@--show_grouped --by_tags@
@--show_grouped --by_priority@

@-s -2@
@-s -3@
@-s -4@
@-s -6@

<br/>
_Show Element Values_
@[-S | --show_elements]@ - show all values for Elements of a given type, sent to stdout
* Must supply one Element type

@--show_elements --by_title@
@--show_elements --by_area@
@--show_elements --by_project@
@--show_elements --by_tags@
@--show_elements --by_actions@
@--show_elements --by_priority@

@-S -1@
@-S -2@
@-S -3@
@-S -4@
@-S -5@
@-S -6@

<br/>
_Rebuild/Regroup Data File_
@[-R | --rebuild_grouped]@ - rebuild the data file grouped by an Element type 
* Must supply one Element type

@--rebuild_grouped --by_area@
@--rebuild_grouped --by_project@
@--rebuild_grouped --by_tags@
@--rebuild_grouped --by_priority@

@-R -2@
@-R -3@
@-R -4@
@-R -6@

<br/>
_Configuration_
_Data File Location_
@[-D | --setconf_data_file]@ - set file location for Organizem data to be written to

@--setconf_data_file --filename "/MyPath/MyOrgmFile.dat"@

@-D -f "/MyPath/MyOrgmFile.dat"@

_Backup Data File Location_
@[-B | --setconf_backup_file]@ - set file location for Organizem backup data to be written to

@--setconf_backup_file --filename "/MyPath/MyOrgmShadowBackupFile.dat"@

@-B -f "/MyPath/MyOrgmBackupFile.dat"@

<br/>
_Backup_
@[-b | --backup]@ - backup all item data
* Can optionally supply name of file to backup to. If none supplied default, then any value supplied previously with --setconf_backup_file is used.  If no setconf value has been provided, default 'orgm.dat_bak', is used.
@[-F | --filename]@

@--backup"@ 
@--backup --filename "/MyPath/MyBackupOrgmFile.dat"@

@-backup"@ 
@-b -f "/MyPath/MyBackupOrgmFile.dat"@
