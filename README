--------
Overview
--------

Everyone organizes their thoughts and work differently.  Many try different organizing/TODO/GTD etc. systems, starting with lists on paper and working up to nifty handheld gadgets, web-based organizers and so on.  If you are like me, you have tried several, and none are quite right.  

So I wrote my own. This is my perfect organizer.  

These are the main goals:
* Support fast item entry, search and reporting from the command line
* Support more involved editing of items in a text editor
* Support a small set of standard fields that provide just enough consistent structure, but don't constrict flexible use for many purposes
* Have command line and editor work together seamlessly


-------------
Installation
-------------

It's easy.  See here: http://github.com/marksweiss/organize-m/blob/master/INSTALL


--------
Features
--------

* Enter new items from the command line
* Enter new items and edit existing items in a text file
* Stores items in YAML format, so they are human readable and editable but also structured so they can be manipulated by organize-m
* Append a dummy entry to the data file from the command line

* Delete items from the command line, by
** title (exact or regex match of terms provided)
** area of responsibility (exact or regex match of terms provided)
** project (exact or regex match of terms provided)
** tags (exact or regex match of terms provided)

* Simple, intuitive, consistent command line actions.
** python orgm --add --title 'cut the grass' --project 'fix up the house' --due_date 5-10-2010 --note 'This has been a long time coming'
** python orgm -a -t 'cut the grass' -p 'fix up the house' -d 5-10-2010 -n 'This has been a long time coming'
** python orgm --find --project 'fix up the house'
** python orgm -f -p 'fix up the house'
** python orgm --find --title 'cut the grass'
** python orgm --find --regex --title 'cut the grass'
** python orgm -f -x -t 'cut the grass'
** python orgm --remove --title 'cut the grass'
** python orgm --show_grouped --by_title
** python orgm --show_elements --by_area
** python orgm -s --by_title
** python orgm -S --by_area
** python orgm --rebuild_grouped --by_project
** python orgm --backup 'my_backup_data.dat'

* Associate each entry with any of the following metadata (all metadata besides title is optional)
** title
** area of responsibility
** project
** tags
** actions
** earliest action due date
** note (free text of any any length)

* Search for items from the command line by
** title (exact or regex match of terms provided)
** actions (exact or regex match of terms provided)
** tags (exact or regex match of terms provided)
** note (exact or regex match of terms provided)

* Report items from the command line, grouped by 
** project
** area of responsibility
** tags

* Rebuild the text file from the command line, to regroup it by
** project
** area of responsibility
** tags

* Report on item element values
** all titles (alpha order, due date order)
** all projects (alpha order)
** all areas (alpha order)
** all tags (alpha order)
** all actions (alpha order)

* Support for backup of data file to provided backup file name


-----------
Item Format
-----------

- item:
  - title: 'My Title'
  - area: 'My Area'
  - project: 'My Project'
  - tags: 'Tag 1, Tag 2'
  - actions: 'Action 1, Action 2'
  - due: '5-5-2010'
  - note: |
    My Note on multiple lines and lines
    and lines and lines
    
- item: 
...
...
...


----------------------
Manually Editing Items
----------------------

Item data is stored in the file orgm.dat, in the directory in which you install Organize-m.  You can edit this text file in the editor of your choice.  Data is stored in YAML format, so an editor with YAML support might be preferable.  

All changes to the data file made by hand must create new valid items with the same fields in the same order, with string elements enclosed in single quotes, and with list elements enclosed by single quotes and separating individual list elements with a comma. The Note element is multiline and must follow YAML multiline format, which indents each line of text after the first with six spaces.

Any changes made by hand will be available to the command line interface as soon as they are saved.  So, for example, you can create or edit an item in and editor, save the change, and the use the --find command (see below) to find and retrieve to the console the item just saved.


-------------------------------
Command Line Interface Cookbook
-------------------------------

* Add item with all elements taking values
python orgm.py --add --title 'my item title' --area 'my area' --project 'my project' --tags 'tag 1, tag 2'  --actions 'do this now, do this later' --due_date '5-5-2010' --note 'This is a short note. Long ones should be edited in the file'
python orgm.py -a -t 'my item title' -A 'my area' -p 'my project' -T 'tag 1, tag 2'  -c 'do this now, do this later' -d '5-5-2010' -n 'This is a short note. Long ones should be edited in the file'

* Append an empty item to the end of the data file because you want to then go into the file and edit it
python orgm.py --add_empty
python orgm.py -e

* Add quick reminder with just an item title
python orgm.py --add --title 'my item title'
python orgm.py -a -t 'my item title'

* Add a quick near-term item with a title and some TODO actions
python orgm.py --add --title 'my item title' --actions 'do this right away, do this later'
python orgm.py -a -t 'my item title' -c 'do this right away, do this later'

* Add a floating non-project item with a title, actions and a due_date
python orgm.py --add --title 'my item title' --actions 'do this right away, do this later' --due_date '5-10-2010'
python orgm.py -a -t 'my item title' -c 'do this right away, do this later' -d '5-10-2010'

* Add a project item
python orgm.py --add --title 'my item title' --project 'my project' --actions 'do this right away, do this later' --due_date '5-10-2010'
python orgm.py -a -t 'my item title' -p 'my project' -c 'do this right away, do this later' -d '5-10-2010'

* Use areas of responsibility to group items and projects
* Grouping items
python orgm.py --add --title 'music to listen to' --area 'Cultural Erudition' --actions "Snippy's Greatest Hits, Exile on Main Street"
python orgm.py -a -t 'music to listen to' -A 'Cultural Erudition' -c "Snippy's Greatest Hits, Exile on Main Street"
python orgm.py --add --title 'movies to watch' --area 'Cultural Erudition' --actions "Metropolis, The Deer Hunter"
python orgm.py -a -t 'movies to watch' -A 'Cultural Erudition' -c "Metropolis, The Deer Hunter"
* Grouping projects
python orgm.py --add --title 'my item title 1' --area 'departmental delivery of all projects' --project 'the project I manage directly' --actions 'do this right away, do this later' --due_date '5-10-2010'
python orgm.py -a -t 'my item title 1' -A 'departmental delivery of all projects' -p 'the project I manage directly' -c 'do this right away, do this later' -d '5-10-2010'
python orgm.py --add --title 'my item title 2' --area 'departmental delivery of all projects' --project 'the project managed by my underling' --actions 'do this right away, do this later' --due_date '5-10-2010'
python orgm.py -a -t 'my item title 2' -A'departmental delivery of all projects' -p 'the project managed by my underling' -c 'do this right away, do this later' -d '5-10-2010'

* Use tags to apply the same searchable label across items, whatever project or area they are in
* Tags are a flexible piece of metadata you can use to flexibly associate items any way you please
python orgm.py --add --title 'an issue with project 1' --project 'project 1' --tags 'project issues, project 1 release'
python orgm.py -a -t 'an issue with project 1' -p 'project 1' -T 'project issues, project 1 release'
python orgm.py --add --title 'an issue with project 2' --project 'project 2' --tags 'project issues, project 2 release'
python orgm.py -a -t 'an issue with project 2' -p 'project 2' -T 'project issues, project 2 release'

* Find and display to stdout all items matching a literal or regular expression. For example, you may wnat to find all items in a project or with a partial title
* Match partial titles by passing --regex flag and --title match predicate
python orgm.py --find --regex --title '*issue with proj*'
python orgm.py -f -x -t '*issue with proj*'
* Find and display to stdout all items in a project or area
python orgm.py --find --project 'my project 1'
python orgm.py -f -p 'my project 1'
python orgm.py --find --area 'my area of extreme responsibility'
python orgm.py -f -A 'my area of extreme responsibility'
* Find and display to stdout all items with a given tag or having any of a list of tags
python orgm.py --find --tags 'tag 1, tag 2'
python orgm.py -f -T 'tag 1, tag 2'
python orgm.py --find --regex --tags 'tag*'
python orgm.py -f -x -T 'tag*'

* Quickly display to stdout all values for title, area of responsibility, project, tags and actions, ordered alpha descending
* This is handy to, for example, see what tags you have used already to keep them consistent
python orgm.py --show_elements --by_title
python orgm.py --show_elements --by_area
python orgm.py --show_elements --by_project
python orgm.py --show_elements --by_tags
python orgm.py --show_elements --by_actions
python orgm.py -S -1
python orgm.py -S -2
python orgm.py -S -3
python orgm.py -S -4
python orgm.py -S -5

* Quickly display to stdout all items, grouped by distinct values for areas of responsibility, projects or tags
* This is a handy report to create a "checklist" of grouped items
python orgm.py --show_grouped --by_area
python orgm.py --show_grouped --by_project
python orgm.py --show_grouped --by_tags
python orgm.py -s -2
python orgm.py -s -3
python orgm.py -s -4

* As above, but rewrite the item data file because you want to go in and work with it, and you want the items grouped a certain way
python orgm.py --rebuild_grouped --by_area
python orgm.py --rebuild_grouped --by_project
python orgm.py --rebuild_grouped --by_tags
python orgm.py -R -2
python orgm.py -R -3
python orgm.py -R -4

* Backup the data file, perhaps after a --reguild_grouped to get a copy of your items in a certain view, or perhaps to a remote network directory or Dropbox or a USB key or whatever to back it up
python orgm.py --backup 'my_backup_data_file.txt'
python orgm.py -b 'my_backup_data_file.txt'


--------------------------------
Command Line Interface Reference
--------------------------------

Precede all commands shown below by: python orgm.py
e.g.-
 python orgm.py --add --title 'my item title' --area 'my area' --project 'my project' --tags 'tag 1, tag 2'  --actions "['do this now', 'do this later']" --due_date '5-5-2010' --note 'This is a short note. Long ones should be edited in the file'

* Title is required.  All other elements are optional
* Title is a string of oneor more tokens enclosed in quotes.
* Project is a string of one or more tokens enclosed in quotes
* Area is a string of one or more tokens enclosed in quotes
* Tags are a list of elements of one or more tokens, separated by commas, enclosed in quotes
* Actions are a list of elements of one or more tokens, separated by commas, enclosed in quotes
* Due Date is a string enclosed in quotes. TODO for future is support a real date type
* Note is a string of one ore more tokens enclosed in quotes

Command Reference
-----------------

[-a | --add] - adds an item to the data file

* Must include --title, and can optionally include any of the additional Element arguments below
[-t | --title]  - item title 
[-A | --area]  - area of responsibility that includes the item
[-p | --project]  - project the item is part of
[-T | --tags]  - tags associated with the item
[-c | --actions]  - item actions that need to be taken
[-d | --due_date] - date first action associated with item is due 
[-n | --note] - additional freeform text associated with item

--add --title 'my item title' --area 'my area' --project 'my project' --tags 'tag 1, tag 2'  --actions "['do this now', 'do this later']" --due_date '5-5-2010' --note 'This is a short note. Long ones should be edited in the file'
--add  # reorganized for readability only
      --title 'my item title' 
      --area 'my area' 
      --project 'my project' 
      --tags 'tag 1, tag 2'  
      --actions 'do this now, do this later' 
      --due_date '5-5-2010' 
      --note 'This is a short note. Long ones should be edited in the file'

      
[-e | --add_empty]  - appends an empty new Item to the bottom of the data file


[-r | --remove] - removes an Item from the data file
* Must supply *one* Element type and value. Items matching will be removed.
* Can supply optional arg to match Items on a regex rather than literal match
[-x | --regex ]

--remove --title 'my item title'
--remove --title 'my item t*'    
--remove --tags 'tag1, tag2'
--remove --tags 'tag1'
--remove --actions 'do this now, do this later'
--remove --actions 'do this now'
--remove --note 'This is a short note. Long ones should be edited in the file'

 
[-f | --find] - finds an Item and returns it to stdout
* Must supply *one* Element type and value. Items matching will be returned.
* Can supply optional --regex arg to match Items on a regex rather than literal match
[-x | --regex ]

--find --title 'my item title'
--find --tags 'tag1, tag2'
--find --tags 'tag1'
--find --actions 'do this now, do this later'
--find --actions 'do this now'
--find --note 'This is a short note. Long ones should be edited in the file'
--find --regex --title 'my item t*'


[-s | --show_grouped] - show Items grouped by an Element type, sent to stdout 
* Must supply one Element type
[-1 | --by_title]
[-2 | --by_area]
[-3 | --by_project]
[-4 | --by_tags]
[-5 | --by_actions]

--show_grouped --by_area
--show_grouped --by_project
--show_grouped --by_tags


[-S | --show_elements] - show all values for Elements of a given type, sent to stdout
* Must supply one Element type

--show_elements --by_title
--show_elements --by_area
--show_elements --by_project
--show_elements --by_tags
--show_elements --by_actions


[-R | --rebuild_grouped] - rebuild the data file grouped by an Element type 
* Must supply one Element type

--rebuild_grouped --by_area
--rebuild_grouped --by_project
--rebuild_grouped --by_tags


[-b | --backup] - backup all item data
* Can optionally supply name of file to backup to. If none supplied default is used.
[-F | --filename]

--backup --file_name '/MyPath/MyBackupOrgmFile.dat'
