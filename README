--------
Overview
--------
Everyone organizes their thoughts and work differently.  Many try different organizing/TODO/GTD etc. systems, starting with lists on paper and working up to nifty handheld gadgets, web-based organizers and so on.  If you are like me, you have tried several, and none are quite right.  

It seems many people have this experience, because there are many commercial and free organizer tools.  And it seems many programmers have this experience, because there are many commercial, free and personal organizer projects.  The combination of highly personalized requirements and high motivation (you want to organize things, in a way that seems organized to you) seems to spawn many solutions to (nearly) the same problem.

So here's mine.  If you try it and like it, great, please let me know.  If you want to suggest features, contribute, fork it and make it your own, please do.  And if nobody cares, that's OK too, because after all I'm building the perfect organizer for me.

--------
Features
--------
* Enter new items from the command line
* Enter new items and edit existing items in a text file
* Stores items in YAML format, so they are human readable and editable but also structured so they can be manipulated by organize-m
* Append a dummy entry to the data file from the command line

* Delete items from the command line, by
** title (exact or regex match of terms provided)
** area of responsibility (exact or regex match of terms provided)
** project (exact or regex match of terms provided)
** tags (exact or regex match of terms provided)

* Simple, intuitive, consistent command line actions.
** python orgm --add --title 'cut the grass' --project 'fix up the house' --due_date 5-10-2010 --notes 'This has been a long time coming'
** python orgm --search --project 'fix up the house'
** python orgm --search --title 'cut the grass'
** python orgm --remove --title 'cut the grass'
** python orgm --show_grouped --by_title
** python orgm --show_elements --by_area
** python orgm --rebuild_grouped --by_project
** python orgm --backup 'my_backup_data.dat'

* Associate each entry with any of the following metadata (all metadata besides title is optional)
** title
** area of responsibility
** project
** tags
** actions
** earliest action due date
** note (free text of any any length)

* Search for items from the command line by
** title (exact or regex match of terms provided)
** actions (exact or regex match of terms provided)
** tags (exact or regex match of terms provided)
** note (exact or regex match of terms provided)

* Report items from the command line, grouped by 
** project
** area of responsibility
** tags

* Rebuild the text file from the command line, to regroup it by
** project
** area of responsibility
** tags

* Report on item element values
** all titles (alpha order, due date order)
** all projects (alpha order)
** all areas (alpha order)
** all tags (alpha order)
** all actions (alpha order)

* Support for backup of data file to provided backup file name

-----------
Item Format
-----------
- item:
  - title: 'My Title'
  - area: 'My Area'
  - project: 'My Project'
  - tags: [Tag 1, Tag 2, ...]
  - actions: [Action 1, Action 2, ...]
  - due: 5-5-2010
  - note: |
    My Note on multiple lines and lines
    and lines and lines
    
- item: 
...
...
...

----------------------
Command Line Interface
----------------------
Precede all commands shown below by: python orgm.py
e.g.-
 python orgm.py --add --title 'my item title' --area 'my area' --project 'my project' --tags 'tag 1, tag 2'  --actions "['do this now', 'do this later']" --due_date '5-5-2010' --note 'This is a short note. Long ones should be edited in the file'

Notes on Usage of Element arguments to --add, --find and --remove
-----------------------------------------------------------------
* Title is required.  All other elements are optional
* Title is a string of oneor more tokens enclosed in quotes.
* Project is a string of one or more tokens enclosed in quotes
* Area is a string of one or more tokens enclosed in quotes
* Tags are a list of elements of one or more tokens, separated by commas, encloseed in quotes
* Actions are a list of elements of one or more tokens, separated by commas, enclosed in quotes
* Due Date is a string enclosed in quotes. TODO for future is support a real date type
* Note is a string of one ore more tokens enclosed in quotes

--add - adds an item to the data file
* Must include --title, and can optionally include any of the additional Element arguments below

--add --title 'my item title' --area 'my area' --project 'my project' --tags 'tag 1, tag 2'  --actions "['do this now', 'do this later']" --due_date '5-5-2010' --note 'This is a short note. Long ones should be edited in the file'
--add  # reorganized for readability only
      --title 'my item title' 
      --area 'my area' 
      --project 'my project' 
      --tags 'tag 1, tag 2'  
      --actions "['do this now', 'do this later']" 
      --due_date '5-5-2010' 
      --note 'This is a short note. Long ones should be edited in the file'

--add_empty  - appends an empty new Item to the bottom of the data file


--remove - removes an Item from the data file
* Must supply *one* Element type and value. Items matching will be removed.
* Can supply optional --regex arg to match Items on a regex rather than literal match

--remove --title 'my item title'
--remove --title 'my item t*'    
--remove --tags "['tag1', 'tag2']"
--remove --tags 'tag1'
--remove --actions "['do this now', 'do this later']"
--remove --actions 'do this now'
--remove --note 'This is a short note. Long ones should be edited in the file'

 
--find - finds an Item and returns it to stdout
* Must supply *one* Element type and value. Items matching will be returned.
* Can supply optional --regex arg to match Items on a regex rather than literal match

--find --title 'my item title'
--find --tags "['tag1', 'tag2']"
--find --tags 'tag1'
--find --actions "['do this now', 'do this later']"
--find --actions 'do this now'
--find --note 'This is a short note. Long ones should be edited in the file'
--find --regex --title 'my item t*'


--show_grouped - show Items grouped by an Element type, sent to stdout 
* Must supply one Element type

--show_grouped --by_area
--show_grouped --by_project
--show_grouped --by_tags


--show_elements - show all values for Elements of a given type, sent to stdout
* Must supply one Element type

--show_elements --by_title
--show_elements --by_area
--show_elements --by_project
--show_elements --by_tags
--show_elements --by_actions


--rebuild_grouped - rebuild the data file grouped by an Element type 
* Must supply one Element type

--rebuild_grouped --by_area
--rebuild_grouped --by_project
--rebuild_grouped --by_tags


--backup --file_name '/MyPath/MyFile.dat'
* Can optionally supply name of file to backup to. If none supplied default is used.
